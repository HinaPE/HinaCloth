name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build & Test (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            blender_url: https://download.blender.org/release/Blender4.5/blender-4.5.3-windows-x64.zip
          - name: Linux
            os: ubuntu-latest
            blender_url: https://download.blender.org/release/Blender4.5/blender-4.5.3-linux-x64.tar.xz
          - name: macOS
            os: macos-14
            blender_url: https://download.blender.org/release/Blender4.5/blender-4.5.3-universal.dmg

    steps:
      - uses: actions/checkout@v4

      - uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: latest

      - name: Set up MSVC environment
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Download Blender (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $url = "${{ matrix.blender_url }}"
          $archive = Join-Path $env:RUNNER_TEMP 'blender.zip'
          Invoke-WebRequest $url -OutFile $archive
          $dest = Join-Path $env:RUNNER_TEMP 'blender'
          Expand-Archive -Path $archive -DestinationPath $dest -Force
          $folder = Get-ChildItem $dest | Where-Object { $_.PSIsContainer } | Select-Object -First 1
          if (-not $folder) { throw 'Failed to locate Blender directory' }
          Add-Content $env:GITHUB_ENV "BLENDER_DIR=$($folder.FullName)"
          Add-Content $env:GITHUB_ENV "BLENDER_EXE=$($folder.FullName)\blender.exe"
          Add-Content $env:GITHUB_ENV "BLENDER_PYTHON=$($folder.FullName)\4.5\python"

      - name: Download Blender (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -eux
          archive="$RUNNER_TEMP/blender.tar.xz"
          curl -L "${{ matrix.blender_url }}" -o "$archive"
          dest="$RUNNER_TEMP/blender"
          mkdir -p "$dest"
          tar -xf "$archive" -C "$dest"
          folder=$(find "$dest" -maxdepth 1 -type d -name 'blender*' | head -n 1)
          if [ -z "$folder" ]; then
            echo "Unable to locate Blender directory" >&2
            exit 1
          fi
          echo "BLENDER_DIR=$folder" >> "$GITHUB_ENV"
          echo "BLENDER_EXE=$folder/blender" >> "$GITHUB_ENV"
          echo "BLENDER_PYTHON=$folder/4.5/python" >> "$GITHUB_ENV"

      - name: Download Blender (macOS)
        if: matrix.os == 'macos-14'
        run: |
          set -eux
          archive="$RUNNER_TEMP/blender.dmg"
          curl -L "${{ matrix.blender_url }}" -o "$archive"
          hdiutil attach "$archive" -mountpoint /Volumes/Blender
          cp -R /Volumes/Blender/Blender.app "$RUNNER_TEMP/Blender.app"
          hdiutil detach /Volumes/Blender
          echo "BLENDER_DIR=$RUNNER_TEMP/Blender.app/Contents" >> "$GITHUB_ENV"
          echo "BLENDER_EXE=$RUNNER_TEMP/Blender.app/Contents/MacOS/Blender" >> "$GITHUB_ENV"
          echo "BLENDER_PYTHON=$RUNNER_TEMP/Blender.app/Contents/Resources/4.5/python" >> "$GITHUB_ENV"

      - name: Configure
        shell: bash
        run: |
          set -eux
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
            -DPython3_ROOT_DIR="$BLENDER_PYTHON" \
            -DHINACLOTH_BLENDER_EXECUTABLE="$BLENDER_EXE"

      - name: Build xpbd_core
        shell: bash
        run: |
          set -eux
          cmake --build build --target xpbd_core --parallel

      - name: Run tests
        shell: bash
        run: |
          set -eux
          ctest --test-dir build --output-on-failure

      - name: Validate Blender example
        shell: bash
        run: |
          set -eux
          "$BLENDER_EXE" --background --python example/demo1.py
