cmake_minimum_required(VERSION 3.26)
project(HinaPE LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(HINAPE_WARN_AS_ERROR "Treat compiler warnings as errors" OFF)
option(HINAPE_WITH_TBB "Enable oneTBB integration" OFF)
option(HINAPE_WITH_AVX2 "Enable AVX2 optimizations when available (Release only)" ON)
option(HINAPE_BUILD_TESTS "Build tests" OFF)
option(HINAPE_BUILD_EXAMPLES "Build examples" ON)

include(CheckCXXCompilerFlag)

function(hinape_apply_common_warnings target)
    if (MSVC)
        target_compile_options(${target} PRIVATE /W4 /permissive- /utf-8 /Zc:__cplusplus)
        if (HINAPE_WARN_AS_ERROR)
            target_compile_options(${target} PRIVATE /WX)
        endif()
        target_compile_definitions(${target} PRIVATE _CRT_SECURE_NO_WARNINGS)
    else()
        target_compile_options(${target} PRIVATE -Wall -Wextra -Wpedantic)
        if (HINAPE_WARN_AS_ERROR)
            target_compile_options(${target} PRIVATE -Werror)
        endif()
    endif()
endfunction()

function(hinape_apply_release_opts target)
    if (MSVC)
        target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:/O2 /Ot /Oi /fp:fast>)
    else()
        target_compile_options(${target} PRIVATE $<$<CONFIG:Release>:-O3 -ffast-math -fomit-frame-pointer>)
    endif()
endfunction()

file(GLOB_RECURSE HINAPE_SRC
    "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/*.h")

add_library(HinaPE STATIC ${HINAPE_SRC})

# Public API headers and internal sources
target_include_directories(HinaPE PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)

hinape_apply_common_warnings(HinaPE)
hinape_apply_release_opts(HinaPE)

set(HINA_HAVE_AVX2 FALSE)
if (HINAPE_WITH_AVX2)
    if (MSVC)
        check_cxx_compiler_flag("/arch:AVX2" HINA_MSVC_HAS_AVX2)
        if (HINA_MSVC_HAS_AVX2)
            target_compile_options(HinaPE PRIVATE $<$<CONFIG:Release>:/arch:AVX2>)
            set(HINA_HAVE_AVX2 TRUE)
        endif()
    else()
        check_cxx_compiler_flag("-mavx2" HINA_GCC_HAS_MAVX2)
        check_cxx_compiler_flag("-mfma"  HINA_GCC_HAS_MFMA)
        set(_AVX_FLAGS)
        if (HINA_GCC_HAS_MAVX2)
            list(APPEND _AVX_FLAGS -mavx2)
        endif()
        if (HINA_GCC_HAS_MFMA)
            list(APPEND _AVX_FLAGS -mfma)
        endif()
        if (_AVX_FLAGS)
            target_compile_options(HinaPE PRIVATE $<$<CONFIG:Release>:${_AVX_FLAGS}>)
            set(HINA_HAVE_AVX2 TRUE)
        endif()
    endif()
endif()

if (HINA_HAVE_AVX2)
    target_compile_definitions(HinaPE PUBLIC HINAPE_HAVE_AVX2=1)
endif()

if (HINAPE_WITH_TBB)
    include(cmake/setup_tbb.cmake)
    use_tbb(HinaPE)
    target_compile_definitions(HinaPE PUBLIC HINAPE_HAVE_TBB=1)
endif()

if (HINAPE_BUILD_TESTS)
    enable_testing()
    if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt)
        add_subdirectory(test)
    endif()
endif()

if (HINAPE_BUILD_EXAMPLES)
    if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/examples/CMakeLists.txt)
        add_subdirectory(examples)
    endif()
endif()
